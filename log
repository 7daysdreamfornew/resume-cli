
> resume-cli@0.4.8 test /run/shm/resume-cli
> node node_modules/mocha/bin/mocha test test/*.js



  Register tests
[2K[1G/ deleting account...[2K[1G- deleting account...[2K[1G\ deleting account...[2K[1G/ deleting account...[2K[1G- deleting account...[2K[1G\ deleting account...[2K[1G/ deleting account...[2K[1G- deleting account...[2K[1G\ deleting account...
email not found
registering user
[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...undefined
    1) should register user
registering user
[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...undefined
    âœ“ should fail to register user is the email already exists in the registry (660ms)
registering user
[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...[2K[1G/ registering...[2K[1G- registering...[2K[1G\ registering...undefined
    âœ“ should fail to register user if username already exists (568ms)
[2K[1G/ attempting to login...[2K[1G- attempting to login...[2K[1G\ attempting to login...[2K[1G/ attempting to login...{ [Error: Unauthorized]
  original: null,
  response: 
   { domain: null,
     _events: {},
     _maxListeners: undefined,
     res: 
      { _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Object],
        trailers: {},
        rawTrailers: [],
        _pendings: [],
        _pendingIndex: 0,
        upgrade: false,
        url: '',
        method: null,
        statusCode: 401,
        statusMessage: 'Unauthorized',
        client: [Object],
        _consuming: true,
        _dumped: false,
        req: [Object],
        setEncoding: [Function],
        on: [Function],
        text: '{"message":"authentication error"}',
        read: [Function],
        body: [Object] },
     request: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _agent: false,
        _formData: null,
        method: 'POST',
        url: 'http://registry.jsonresume.org/session',
        header: {},
        writable: true,
        _redirects: 0,
        _maxRedirects: 5,
        cookies: '',
        qs: {},
        qsRaw: [],
        _redirectList: [],
        req: [Object],
        protocol: 'http:',
        host: 'registry.jsonresume.org',
        _data: [Object],
        _callback: [Function],
        res: [Object],
        response: [Circular],
        _timeout: 0,
        called: true },
     req: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: true,
        sendDate: false,
        _removedHeader: [Object],
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        _headerSent: true,
        socket: [Object],
        connection: [Object],
        _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        agent: [Object],
        socketPath: undefined,
        method: 'POST',
        path: '/session',
        parser: null,
        res: [Object] },
     links: {},
     text: '{"message":"authentication error"}',
     body: { message: 'authentication error' },
     files: {},
     buffered: true,
     headers: 
      { date: 'Tue, 17 Nov 2015 02:42:43 GMT',
        'content-type': 'application/json; charset=utf-8',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'set-cookie': [Object],
        'x-powered-by': 'Express',
        'access-control-allow-credentials': 'true',
        'access-control-allow-origin': 'undefined',
        'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
        'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
        vary: 'Accept-Encoding',
        'content-encoding': 'gzip',
        via: '1.1 vegur',
        server: 'cloudflare-nginx',
        'cf-ray': '2468157c2d163283-HKG' },
     header: 
      { date: 'Tue, 17 Nov 2015 02:42:43 GMT',
        'content-type': 'application/json; charset=utf-8',
        'transfer-encoding': 'chunked',
        connection: 'close',
        'set-cookie': [Object],
        'x-powered-by': 'Express',
        'access-control-allow-credentials': 'true',
        'access-control-allow-origin': 'undefined',
        'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
        'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
        vary: 'Accept-Encoding',
        'content-encoding': 'gzip',
        via: '1.1 vegur',
        server: 'cloudflare-nginx',
        'cf-ray': '2468157c2d163283-HKG' },
     statusCode: 401,
     status: 401,
     statusType: 4,
     info: false,
     ok: false,
     redirect: false,
     clientError: true,
     serverError: false,
     error: 
      { [Error: cannot POST /session (401)]
        status: 401,
        text: '{"message":"authentication error"}',
        method: 'POST',
        path: '/session' },
     accepted: false,
     noContent: false,
     badRequest: false,
     unauthorized: true,
     notAcceptable: false,
     forbidden: false,
     notFound: false,
     charset: 'utf-8',
     type: 'application/json',
     setEncoding: [Function],
     redirects: [] },
  status: 401 } { message: 'authentication error' }
Email or Password incorrect.
{ message: 'authentication error' }
    2) should receive a Successful login response
[2K[1G/ changing theme...[2K[1G- changing theme...[2K[1G\ changing theme...[2K[1G/ changing theme...    âœ“ should change theme (280ms)

Done! Your resume theme has been successfully changed to flat.
And the changes have been published to: undefined
Would you like to view your newly themed resume in the web browser? [y/n]: [2K[1G/ changing password...[2K[1G- changing password...[2K[1G\ changing password...[2K[1G/ changing password...[2K[1G- changing password...[2K[1G\ changing password...[2K[1G/ changing password...[2K[1G- changing password...    3) should change password
[2K[1G\ changing password...[2K[1G/ changing password...[2K[1G/ publishing...[2K[1G- changing password...[2K[1G- publishing...[2K[1G\ changing password...[2K[1G\ publishing...[2K[1G/ changing password...[2K[1G/ publishing...[2K[1G- changing password...[2K[1G- publishing...[2K[1G\ changing password...[2K[1G\ publishing...[2K[1G/ changing password...[2K[1G/ publishing...[2K[1G- changing password...[2K[1G- publishing...[2K[1G\ changing password...[2K[1G\ publishing...    âœ“ should publish guest resume (585ms)

Success! Your resume is now published at: http://registry.jsonresume.org/49302e2b
Would you like to open your newly published resume in the web browser? [y/n]: [2K[1G/ changing password...[2K[1G/ deleting account...[2K[1G- changing password...[2K[1G- deleting account...[2K[1G\ changing password...[2K[1G\ deleting account...[2K[1G/ changing password...[2K[1G/ deleting account...[2K[1G- changing password...[2K[1G- deleting account...[2K[1G\ changing password...[2K[1G\ deleting account...[2K[1G/ changing password...[2K[1G/ deleting account...[2K[1G- changing password...[2K[1G- deleting account...
email not found
    âœ“ should delete user (483ms)

  TODO:
    - the server should return an error if session login does not work


  5 passing (5s)
  1 pending
  3 failing

  1) Register tests should register user:
     Uncaught AssertionError: expected Error {
  original: null,
  response: Response {
    _events: Object {},
    _maxListeners: undefined,
    accepted: false,
    badRequest: false,
    body: Object {
      error: Object {
        field: 'username',
        message: 'This username is already taken, please try another one'
      }
    },
    buffered: true,
    charset: 'utf-8',
    clientError: true,
    domain: null,
    error: Error {
      method: 'POST',
      path: '/user',
      status: 409,
      text: '{"error":{"field":"username","message":"This username is already taken, please try another one"}}',
      message: 'cannot POST /user (409)'
    },
    files: Object {},
    forbidden: false,
    header: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157130f33433-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:41 GMT',
      etag: 'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    headers: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157130f33433-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:41 GMT',
      etag: 'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    info: false,
    links: Object {},
    noContent: false,
    notAcceptable: false,
    notFound: false,
    ok: false,
    redirect: false,
    redirects: Array [],
    req: ClientRequest {
      _events: Object {
        drain: Function { name: '' },
        error: Function { name: '' },
        response: Function { name: '' }
      },
      _hangupClose: false,
      _hasBody: true,
      _header: 'POST /user HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nX-API-Key: foobar\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
      _headerNames: Object {
        accept: 'Accept',
        'accept-encoding': 'Accept-Encoding',
        'content-length': 'Content-Length',
        'content-type': 'Content-Type',
        host: 'Host',
        'user-agent': 'User-Agent',
        'x-api-key': 'X-API-Key'
      },
      _headerSent: true,
      _headers: Object {
        accept: 'application/json',
        'accept-encoding': 'gzip, deflate',
        'content-length': 65,
        'content-type': 'application/json',
        host: 'registry.jsonresume.org',
        'user-agent': 'node-superagent/1.4.0',
        'x-api-key': 'foobar'
      },
      _last: true,
      _maxListeners: undefined,
      _removedHeader: Object { 'content-length': false },
      _trailer: '',
      agent: Agent {
        _events: Object { free: Function { name: '' } },
        _maxListeners: undefined,
        defaultPort: 80,
        domain: null,
        freeSockets: Object {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { path: null },
        protocol: 'http:',
        requests: Object {},
        sockets: Object {}
      },
      chunkedEncoding: false,
      connection: Socket {
        _bytesDispatched: 302,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 1006,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      finished: true,
      method: 'POST',
      output: Array [],
      outputCallbacks: Array [],
      outputEncodings: Array [],
      parser: null,
      path: '/user',
      res: IncomingMessage {
        _consuming: true,
        _dumped: false,
        _events: Object {
          close: Function { name: '' },
          end: Array [ Function { name: 'responseOnEnd' } ],
          error: Function { name: '' }
        },
        _maxListeners: undefined,
        _pendingIndex: 0,
        _pendings: Array [],
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: true,
          ended: true,
          flowing: false,
          highWaterMark: 16384,
          length: 0,
          needReadable: false,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: false,
          readingMore: false,
          resumeScheduled: false,
          sync: true
        },
        body: Object {
          error: Object {
            field: 'username',
            message: 'This username is already taken, please try another one'
          }
        },
        client: Socket {
          _bytesDispatched: 302,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 1006,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        complete: true,
        connection: Socket {
          _bytesDispatched: 302,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 1006,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        headers: Object {
          'access-control-allow-credentials': 'true',
          'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
          'access-control-allow-origin': 'undefined',
          'cf-ray': '2468157130f33433-HKG',
          connection: 'close',
          'content-encoding': 'gzip',
          'content-type': 'application/json; charset=utf-8',
          date: 'Tue, 17 Nov 2015 02:42:41 GMT',
          etag: 'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
          server: 'cloudflare-nginx',
          'set-cookie': Array [
            '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly',
            'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly'
          ],
          'transfer-encoding': 'chunked',
          vary: 'Accept-Encoding',
          via: '1.1 vegur',
          'x-powered-by': 'Express'
        },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        on: Function { name: '' },
        rawHeaders: Array [
          'Date',
          'Tue, 17 Nov 2015 02:42:41 GMT',
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Credentials',
          'true',
          'Access-Control-Allow-Origin',
          'undefined',
          'Access-Control-Allow-Methods',
          'GET,PUT,POST,DELETE,OPTIONS',
          'Access-Control-Allow-Headers',
          'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'Content-Type',
          'Etag',
          'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
          'Set-Cookie',
          'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly',
          'Vary',
          'Accept-Encoding',
          'Content-Encoding',
          'gzip',
          'Via',
          '1.1 vegur',
          'application/json; charset=utf-8',
          'Server',
          'cloudflare-nginx',
          'CF-RAY',
          '2468157130f33433-HKG',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Set-Cookie',
          '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly'
        ],
        rawTrailers: Array [],
        read: Function { name: '' },
        readable: false,
        req: [Circular],
        setEncoding: Function { name: '' },
        socket: Socket {
          _bytesDispatched: 302,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 1006,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        statusCode: 409,
        statusMessage: 'Conflict',
        text: '{"error":{"field":"username","message":"This username is already taken, please try another one"}}',
        trailers: Object {},
        upgrade: false,
        url: ''
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _bytesDispatched: 302,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 1006,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      socketPath: undefined,
      useChunkedEncodingByDefault: true,
      writable: true
    },
    request: [Promise],
    res: IncomingMessage {
      _consuming: true,
      _dumped: false,
      _events: Object {
        close: Function { name: '' },
        end: Array [ Function { name: 'responseOnEnd' } ],
        error: Function { name: '' }
      },
      _maxListeners: undefined,
      _pendingIndex: 0,
      _pendings: Array [],
      _readableState: ReadableState {
        awaitDrain: 0,
        buffer: Array [],
        decoder: null,
        defaultEncoding: 'utf8',
        emittedReadable: false,
        encoding: null,
        endEmitted: true,
        ended: true,
        flowing: false,
        highWaterMark: 16384,
        length: 0,
        needReadable: false,
        objectMode: false,
        pipes: null,
        pipesCount: 0,
        ranOut: false,
        readableListening: false,
        reading: false,
        readingMore: false,
        resumeScheduled: false,
        sync: true
      },
      body: Object {
        error: Object {
          field: 'username',
          message: 'This username is already taken, please try another one'
        }
      },
      client: Socket {
        _bytesDispatched: 302,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /user HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nX-API-Key: foobar\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent',
            'x-api-key': 'X-API-Key'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0',
            'x-api-key': 'foobar'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/user',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 1006,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      complete: true,
      connection: Socket {
        _bytesDispatched: 302,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /user HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nX-API-Key: foobar\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent',
            'x-api-key': 'X-API-Key'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0',
            'x-api-key': 'foobar'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/user',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 1006,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      headers: Object {
        'access-control-allow-credentials': 'true',
        'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
        'access-control-allow-origin': 'undefined',
        'cf-ray': '2468157130f33433-HKG',
        connection: 'close',
        'content-encoding': 'gzip',
        'content-type': 'application/json; charset=utf-8',
        date: 'Tue, 17 Nov 2015 02:42:41 GMT',
        etag: 'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
        server: 'cloudflare-nginx',
        'set-cookie': Array [
          '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly',
          'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly'
        ],
        'transfer-encoding': 'chunked',
        vary: 'Accept-Encoding',
        via: '1.1 vegur',
        'x-powered-by': 'Express'
      },
      httpVersion: '1.1',
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      method: null,
      on: Function { name: '' },
      rawHeaders: Array [
        'Date',
        'Tue, 17 Nov 2015 02:42:41 GMT',
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Credentials',
        'true',
        'Access-Control-Allow-Origin',
        'undefined',
        'Access-Control-Allow-Methods',
        'GET,PUT,POST,DELETE,OPTIONS',
        'Access-Control-Allow-Headers',
        'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'Content-Type',
        'Etag',
        'W/"61-ZIOg65ASQuKL96ErR8/wCw"',
        'Set-Cookie',
        'connect.sid=s%3AeCi0dGQIuLq362CTdf180ZIxfk3pyIT5.ZNJcI82rGYqbxsA4mjYtRcCWQq%2FLWh51D27aUuMX8Dk; Path=/; HttpOnly',
        'Vary',
        'Accept-Encoding',
        'Content-Encoding',
        'gzip',
        'Via',
        '1.1 vegur',
        'application/json; charset=utf-8',
        'Server',
        'cloudflare-nginx',
        'CF-RAY',
        '2468157130f33433-HKG',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Set-Cookie',
        '__cfduid=d51a478e804fcbd8c1651a1e76878566b1447728161; expires=Wed, 16-Nov-16 02:42:41 GMT; path=/; domain=.jsonresume.org; HttpOnly'
      ],
      rawTrailers: Array [],
      read: Function { name: '' },
      readable: false,
      req: ClientRequest {
        _events: Object {
          drain: Function { name: '' },
          error: Function { name: '' },
          response: Function { name: '' }
        },
        _hangupClose: false,
        _hasBody: true,
        _header: 'POST /user HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nX-API-Key: foobar\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
        _headerNames: Object {
          accept: 'Accept',
          'accept-encoding': 'Accept-Encoding',
          'content-length': 'Content-Length',
          'content-type': 'Content-Type',
          host: 'Host',
          'user-agent': 'User-Agent',
          'x-api-key': 'X-API-Key'
        },
        _headerSent: true,
        _headers: Object {
          accept: 'application/json',
          'accept-encoding': 'gzip, deflate',
          'content-length': 65,
          'content-type': 'application/json',
          host: 'registry.jsonresume.org',
          'user-agent': 'node-superagent/1.4.0',
          'x-api-key': 'foobar'
        },
        _last: true,
        _maxListeners: undefined,
        _removedHeader: Object { 'content-length': false },
        _trailer: '',
        agent: Agent {
          _events: Object { free: Function { name: '' } },
          _maxListeners: undefined,
          defaultPort: 80,
          domain: null,
          freeSockets: Object {},
          keepAlive: false,
          keepAliveMsecs: 1000,
          maxFreeSockets: 256,
          maxSockets: Infinity,
          options: Object { path: null },
          protocol: 'http:',
          requests: Object {},
          sockets: Object {}
        },
        chunkedEncoding: false,
        connection: Socket {
          _bytesDispatched: 302,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 1006,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        finished: true,
        method: 'POST',
        output: Array [],
        outputCallbacks: Array [],
        outputEncodings: Array [],
        parser: null,
        path: '/user',
        res: [Circular],
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket {
          _bytesDispatched: 302,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 1006,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        socketPath: undefined,
        useChunkedEncodingByDefault: true,
        writable: true
      },
      setEncoding: Function { name: '' },
      socket: Socket {
        _bytesDispatched: 302,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /user HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nX-API-Key: foobar\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent',
            'x-api-key': 'X-API-Key'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0',
            'x-api-key': 'foobar'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/user',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 1006,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      statusCode: 409,
      statusMessage: 'Conflict',
      text: '{"error":{"field":"username","message":"This username is already taken, please try another one"}}',
      trailers: Object {},
      upgrade: false,
      url: ''
    },
    serverError: false,
    setEncoding: Function { name: '' },
    status: 409,
    statusCode: 409,
    statusType: 4,
    text: '{"error":{"field":"username","message":"This username is already taken, please try another one"}}',
    type: 'application/json',
    unauthorized: false
  },
  status: 409,
  message: 'Conflict'
} to not exist
      at test/index.js:26:18
      at lib/register/register-user.js:23:17
      at Request.callback (node_modules/superagent/lib/node/index.js:797:3)
      at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:990:12)
      at Unzip.<anonymous> (node_modules/superagent/lib/node/utils.js:108:12)
      at _stream_readable.js:908:16

  2) Register tests should receive a Successful login response:
     Uncaught AssertionError: expected Error {
  original: null,
  response: Response {
    _events: Object {},
    _maxListeners: undefined,
    accepted: false,
    badRequest: false,
    body: Object { message: 'authentication error' },
    buffered: true,
    charset: 'utf-8',
    clientError: true,
    domain: null,
    error: Error {
      method: 'POST',
      path: '/session',
      status: 401,
      text: '{"message":"authentication error"}',
      message: 'cannot POST /session (401)'
    },
    files: Object {},
    forbidden: false,
    header: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157c2d163283-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:43 GMT',
      etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    headers: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157c2d163283-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:43 GMT',
      etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    info: false,
    links: Object {},
    noContent: false,
    notAcceptable: false,
    notFound: false,
    ok: false,
    redirect: false,
    redirects: Array [],
    req: ClientRequest {
      _events: Object {
        drain: Function { name: '' },
        error: Function { name: '' },
        response: Function { name: '' }
      },
      _hangupClose: false,
      _hasBody: true,
      _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
      _headerNames: Object {
        accept: 'Accept',
        'accept-encoding': 'Accept-Encoding',
        'content-length': 'Content-Length',
        'content-type': 'Content-Type',
        host: 'Host',
        'user-agent': 'User-Agent'
      },
      _headerSent: true,
      _headers: Object {
        accept: 'application/json',
        'accept-encoding': 'gzip, deflate',
        'content-length': 65,
        'content-type': 'application/json',
        host: 'registry.jsonresume.org',
        'user-agent': 'node-superagent/1.4.0'
      },
      _last: true,
      _maxListeners: undefined,
      _removedHeader: Object { 'content-length': false },
      _trailer: '',
      agent: Agent {
        _events: Object { free: Function { name: '' } },
        _maxListeners: undefined,
        defaultPort: 80,
        domain: null,
        freeSockets: Object {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { path: null },
        protocol: 'http:',
        requests: Object {},
        sockets: Object {}
      },
      chunkedEncoding: false,
      connection: Socket {
        _bytesDispatched: 286,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 966,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      finished: true,
      method: 'POST',
      output: Array [],
      outputCallbacks: Array [],
      outputEncodings: Array [],
      parser: null,
      path: '/session',
      res: IncomingMessage {
        _consuming: true,
        _dumped: false,
        _events: Object {
          close: Function { name: '' },
          end: Array [ Function { name: 'responseOnEnd' } ],
          error: Function { name: '' }
        },
        _maxListeners: undefined,
        _pendingIndex: 0,
        _pendings: Array [],
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: true,
          ended: true,
          flowing: false,
          highWaterMark: 16384,
          length: 0,
          needReadable: false,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: false,
          readingMore: false,
          resumeScheduled: false,
          sync: true
        },
        body: Object { message: 'authentication error' },
        client: Socket {
          _bytesDispatched: 286,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 966,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        complete: true,
        connection: Socket {
          _bytesDispatched: 286,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 966,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        headers: Object {
          'access-control-allow-credentials': 'true',
          'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
          'access-control-allow-origin': 'undefined',
          'cf-ray': '2468157c2d163283-HKG',
          connection: 'close',
          'content-encoding': 'gzip',
          'content-type': 'application/json; charset=utf-8',
          date: 'Tue, 17 Nov 2015 02:42:43 GMT',
          etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
          server: 'cloudflare-nginx',
          'set-cookie': Array [
            '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
            'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly'
          ],
          'transfer-encoding': 'chunked',
          vary: 'Accept-Encoding',
          via: '1.1 vegur',
          'x-powered-by': 'Express'
        },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        on: Function { name: '' },
        rawHeaders: Array [
          'Date',
          'Tue, 17 Nov 2015 02:42:43 GMT',
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Credentials',
          'true',
          'Access-Control-Allow-Origin',
          'undefined',
          'Access-Control-Allow-Methods',
          'GET,PUT,POST,DELETE,OPTIONS',
          'Access-Control-Allow-Headers',
          'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'Content-Type',
          'Etag',
          'W/"22-a2yDcITLFJdZ138lmz49Tg"',
          'Set-Cookie',
          'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly',
          'Vary',
          'Accept-Encoding',
          'Content-Encoding',
          'gzip',
          'Via',
          '1.1 vegur',
          'application/json; charset=utf-8',
          'Server',
          'cloudflare-nginx',
          'CF-RAY',
          '2468157c2d163283-HKG',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Set-Cookie',
          '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly'
        ],
        rawTrailers: Array [],
        read: Function { name: '' },
        readable: false,
        req: [Circular],
        setEncoding: Function { name: '' },
        socket: Socket {
          _bytesDispatched: 286,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 966,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        statusCode: 401,
        statusMessage: 'Unauthorized',
        text: '{"message":"authentication error"}',
        trailers: Object {},
        upgrade: false,
        url: ''
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _bytesDispatched: 286,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 966,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      socketPath: undefined,
      useChunkedEncodingByDefault: true,
      writable: true
    },
    request: [Promise],
    res: IncomingMessage {
      _consuming: true,
      _dumped: false,
      _events: Object {
        close: Function { name: '' },
        end: Array [ Function { name: 'responseOnEnd' } ],
        error: Function { name: '' }
      },
      _maxListeners: undefined,
      _pendingIndex: 0,
      _pendings: Array [],
      _readableState: ReadableState {
        awaitDrain: 0,
        buffer: Array [],
        decoder: null,
        defaultEncoding: 'utf8',
        emittedReadable: false,
        encoding: null,
        endEmitted: true,
        ended: true,
        flowing: false,
        highWaterMark: 16384,
        length: 0,
        needReadable: false,
        objectMode: false,
        pipes: null,
        pipesCount: 0,
        ranOut: false,
        readableListening: false,
        reading: false,
        readingMore: false,
        resumeScheduled: false,
        sync: true
      },
      body: Object { message: 'authentication error' },
      client: Socket {
        _bytesDispatched: 286,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/session',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 966,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      complete: true,
      connection: Socket {
        _bytesDispatched: 286,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/session',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 966,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      headers: Object {
        'access-control-allow-credentials': 'true',
        'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
        'access-control-allow-origin': 'undefined',
        'cf-ray': '2468157c2d163283-HKG',
        connection: 'close',
        'content-encoding': 'gzip',
        'content-type': 'application/json; charset=utf-8',
        date: 'Tue, 17 Nov 2015 02:42:43 GMT',
        etag: 'W/"22-a2yDcITLFJdZ138lmz49Tg"',
        server: 'cloudflare-nginx',
        'set-cookie': Array [
          '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
          'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly'
        ],
        'transfer-encoding': 'chunked',
        vary: 'Accept-Encoding',
        via: '1.1 vegur',
        'x-powered-by': 'Express'
      },
      httpVersion: '1.1',
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      method: null,
      on: Function { name: '' },
      rawHeaders: Array [
        'Date',
        'Tue, 17 Nov 2015 02:42:43 GMT',
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Credentials',
        'true',
        'Access-Control-Allow-Origin',
        'undefined',
        'Access-Control-Allow-Methods',
        'GET,PUT,POST,DELETE,OPTIONS',
        'Access-Control-Allow-Headers',
        'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'Content-Type',
        'Etag',
        'W/"22-a2yDcITLFJdZ138lmz49Tg"',
        'Set-Cookie',
        'connect.sid=s%3AUmFn4PGQ0ZmDru5rncn55C5EeB-_R7b7.tgal%2BuuLsbY8s%2FyqoneEv8h78n5oI8pKBODufPWLtHU; Path=/; HttpOnly',
        'Vary',
        'Accept-Encoding',
        'Content-Encoding',
        'gzip',
        'Via',
        '1.1 vegur',
        'application/json; charset=utf-8',
        'Server',
        'cloudflare-nginx',
        'CF-RAY',
        '2468157c2d163283-HKG',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Set-Cookie',
        '__cfduid=d152046d05502b9bb7729b61c52df771e1447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly'
      ],
      rawTrailers: Array [],
      read: Function { name: '' },
      readable: false,
      req: ClientRequest {
        _events: Object {
          drain: Function { name: '' },
          error: Function { name: '' },
          response: Function { name: '' }
        },
        _hangupClose: false,
        _hasBody: true,
        _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
        _headerNames: Object {
          accept: 'Accept',
          'accept-encoding': 'Accept-Encoding',
          'content-length': 'Content-Length',
          'content-type': 'Content-Type',
          host: 'Host',
          'user-agent': 'User-Agent'
        },
        _headerSent: true,
        _headers: Object {
          accept: 'application/json',
          'accept-encoding': 'gzip, deflate',
          'content-length': 65,
          'content-type': 'application/json',
          host: 'registry.jsonresume.org',
          'user-agent': 'node-superagent/1.4.0'
        },
        _last: true,
        _maxListeners: undefined,
        _removedHeader: Object { 'content-length': false },
        _trailer: '',
        agent: Agent {
          _events: Object { free: Function { name: '' } },
          _maxListeners: undefined,
          defaultPort: 80,
          domain: null,
          freeSockets: Object {},
          keepAlive: false,
          keepAliveMsecs: 1000,
          maxFreeSockets: 256,
          maxSockets: Infinity,
          options: Object { path: null },
          protocol: 'http:',
          requests: Object {},
          sockets: Object {}
        },
        chunkedEncoding: false,
        connection: Socket {
          _bytesDispatched: 286,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 966,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        finished: true,
        method: 'POST',
        output: Array [],
        outputCallbacks: Array [],
        outputEncodings: Array [],
        parser: null,
        path: '/session',
        res: [Circular],
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket {
          _bytesDispatched: 286,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 966,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        socketPath: undefined,
        useChunkedEncodingByDefault: true,
        writable: true
      },
      setEncoding: Function { name: '' },
      socket: Socket {
        _bytesDispatched: 286,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'POST /session HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 65\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 65,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'POST',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/session',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 966,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      statusCode: 401,
      statusMessage: 'Unauthorized',
      text: '{"message":"authentication error"}',
      trailers: Object {},
      upgrade: false,
      url: ''
    },
    serverError: false,
    setEncoding: Function { name: '' },
    status: 401,
    statusCode: 401,
    statusType: 4,
    text: '{"message":"authentication error"}',
    type: 'application/json',
    unauthorized: true
  },
  status: 401,
  message: 'Unauthorized'
} to not exist
      at test/index.js:65:18
      at lib/login/login-request.js:26:16
      at Request.callback (node_modules/superagent/lib/node/index.js:797:3)
      at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:990:12)
      at Unzip.<anonymous> (node_modules/superagent/lib/node/utils.js:108:12)
      at _stream_readable.js:908:16

  3) Register tests should change password:
     Uncaught AssertionError: expected Error {
  original: null,
  response: Response {
    _events: Object {},
    _maxListeners: undefined,
    accepted: false,
    badRequest: false,
    body: Object { message: 'email not found' },
    buffered: true,
    charset: 'utf-8',
    clientError: true,
    domain: null,
    error: Error {
      method: 'PUT',
      path: '/account',
      status: 401,
      text: '{"message":"email not found"}',
      message: 'cannot PUT /account (401)'
    },
    files: Object {},
    forbidden: false,
    header: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157fee7a3289-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:44 GMT',
      etag: 'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    headers: Object {
      'access-control-allow-credentials': 'true',
      'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
      'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
      'access-control-allow-origin': 'undefined',
      'cf-ray': '2468157fee7a3289-HKG',
      connection: 'close',
      'content-encoding': 'gzip',
      'content-type': 'application/json; charset=utf-8',
      date: 'Tue, 17 Nov 2015 02:42:44 GMT',
      etag: 'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
      server: 'cloudflare-nginx',
      'set-cookie': Array [
        '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
        'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly'
      ],
      'transfer-encoding': 'chunked',
      vary: 'Accept-Encoding',
      via: '1.1 vegur',
      'x-powered-by': 'Express'
    },
    info: false,
    links: Object {},
    noContent: false,
    notAcceptable: false,
    notFound: false,
    ok: false,
    redirect: false,
    redirects: Array [],
    req: ClientRequest {
      _events: Object {
        drain: Function { name: '' },
        error: Function { name: '' },
        response: Function { name: '' }
      },
      _hangupClose: false,
      _hasBody: true,
      _header: 'PUT /account HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 121\r\nConnection: close\r\n\r\n',
      _headerNames: Object {
        accept: 'Accept',
        'accept-encoding': 'Accept-Encoding',
        'content-length': 'Content-Length',
        'content-type': 'Content-Type',
        host: 'Host',
        'user-agent': 'User-Agent'
      },
      _headerSent: true,
      _headers: Object {
        accept: 'application/json',
        'accept-encoding': 'gzip, deflate',
        'content-length': 121,
        'content-type': 'application/json',
        host: 'registry.jsonresume.org',
        'user-agent': 'node-superagent/1.4.0'
      },
      _last: true,
      _maxListeners: undefined,
      _removedHeader: Object { 'content-length': false },
      _trailer: '',
      agent: Agent {
        _events: Object { free: Function { name: '' } },
        _maxListeners: undefined,
        defaultPort: 80,
        domain: null,
        freeSockets: Object {},
        keepAlive: false,
        keepAliveMsecs: 1000,
        maxFreeSockets: 256,
        maxSockets: Infinity,
        options: Object { path: null },
        protocol: 'http:',
        requests: Object {},
        sockets: Object {}
      },
      chunkedEncoding: false,
      connection: Socket {
        _bytesDispatched: 342,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 959,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      finished: true,
      method: 'PUT',
      output: Array [],
      outputCallbacks: Array [],
      outputEncodings: Array [],
      parser: null,
      path: '/account',
      res: IncomingMessage {
        _consuming: true,
        _dumped: false,
        _events: Object {
          close: Function { name: '' },
          end: Array [ Function { name: 'responseOnEnd' } ],
          error: Function { name: '' }
        },
        _maxListeners: undefined,
        _pendingIndex: 0,
        _pendings: Array [],
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: true,
          ended: true,
          flowing: false,
          highWaterMark: 16384,
          length: 0,
          needReadable: false,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: false,
          readingMore: false,
          resumeScheduled: false,
          sync: true
        },
        body: Object { message: 'email not found' },
        client: Socket {
          _bytesDispatched: 342,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 959,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        complete: true,
        connection: Socket {
          _bytesDispatched: 342,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 959,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        headers: Object {
          'access-control-allow-credentials': 'true',
          'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
          'access-control-allow-origin': 'undefined',
          'cf-ray': '2468157fee7a3289-HKG',
          connection: 'close',
          'content-encoding': 'gzip',
          'content-type': 'application/json; charset=utf-8',
          date: 'Tue, 17 Nov 2015 02:42:44 GMT',
          etag: 'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
          server: 'cloudflare-nginx',
          'set-cookie': Array [
            '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
            'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly'
          ],
          'transfer-encoding': 'chunked',
          vary: 'Accept-Encoding',
          via: '1.1 vegur',
          'x-powered-by': 'Express'
        },
        httpVersion: '1.1',
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        method: null,
        on: Function { name: '' },
        rawHeaders: Array [
          'Date',
          'Tue, 17 Nov 2015 02:42:44 GMT',
          'X-Powered-By',
          'Express',
          'Access-Control-Allow-Credentials',
          'true',
          'Access-Control-Allow-Origin',
          'undefined',
          'Access-Control-Allow-Methods',
          'GET,PUT,POST,DELETE,OPTIONS',
          'Access-Control-Allow-Headers',
          'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
          'Content-Type',
          'Etag',
          'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
          'Set-Cookie',
          'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly',
          'Vary',
          'Accept-Encoding',
          'Content-Encoding',
          'gzip',
          'Via',
          '1.1 vegur',
          'application/json; charset=utf-8',
          'Server',
          'cloudflare-nginx',
          'CF-RAY',
          '2468157fee7a3289-HKG',
          'Transfer-Encoding',
          'chunked',
          'Connection',
          'close',
          'Set-Cookie',
          '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly'
        ],
        rawTrailers: Array [],
        read: Function { name: '' },
        readable: false,
        req: [Circular],
        setEncoding: Function { name: '' },
        socket: Socket {
          _bytesDispatched: 342,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 959,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        statusCode: 401,
        statusMessage: 'Unauthorized',
        text: '{"message":"email not found"}',
        trailers: Object {},
        upgrade: false,
        url: ''
      },
      sendDate: false,
      shouldKeepAlive: false,
      socket: Socket {
        _bytesDispatched: 342,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: [Circular],
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 959,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      socketPath: undefined,
      useChunkedEncodingByDefault: true,
      writable: true
    },
    request: [Promise],
    res: IncomingMessage {
      _consuming: true,
      _dumped: false,
      _events: Object {
        close: Function { name: '' },
        end: Array [ Function { name: 'responseOnEnd' } ],
        error: Function { name: '' }
      },
      _maxListeners: undefined,
      _pendingIndex: 0,
      _pendings: Array [],
      _readableState: ReadableState {
        awaitDrain: 0,
        buffer: Array [],
        decoder: null,
        defaultEncoding: 'utf8',
        emittedReadable: false,
        encoding: null,
        endEmitted: true,
        ended: true,
        flowing: false,
        highWaterMark: 16384,
        length: 0,
        needReadable: false,
        objectMode: false,
        pipes: null,
        pipesCount: 0,
        ranOut: false,
        readableListening: false,
        reading: false,
        readingMore: false,
        resumeScheduled: false,
        sync: true
      },
      body: Object { message: 'email not found' },
      client: Socket {
        _bytesDispatched: 342,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'PUT /account HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 121\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 121,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'PUT',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/account',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 959,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      complete: true,
      connection: Socket {
        _bytesDispatched: 342,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'PUT /account HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 121\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 121,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'PUT',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/account',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 959,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      domain: null,
      headers: Object {
        'access-control-allow-credentials': 'true',
        'access-control-allow-headers': 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'access-control-allow-methods': 'GET,PUT,POST,DELETE,OPTIONS',
        'access-control-allow-origin': 'undefined',
        'cf-ray': '2468157fee7a3289-HKG',
        connection: 'close',
        'content-encoding': 'gzip',
        'content-type': 'application/json; charset=utf-8',
        date: 'Tue, 17 Nov 2015 02:42:44 GMT',
        etag: 'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
        server: 'cloudflare-nginx',
        'set-cookie': Array [
          '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly',
          'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly'
        ],
        'transfer-encoding': 'chunked',
        vary: 'Accept-Encoding',
        via: '1.1 vegur',
        'x-powered-by': 'Express'
      },
      httpVersion: '1.1',
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      method: null,
      on: Function { name: '' },
      rawHeaders: Array [
        'Date',
        'Tue, 17 Nov 2015 02:42:44 GMT',
        'X-Powered-By',
        'Express',
        'Access-Control-Allow-Credentials',
        'true',
        'Access-Control-Allow-Origin',
        'undefined',
        'Access-Control-Allow-Methods',
        'GET,PUT,POST,DELETE,OPTIONS',
        'Access-Control-Allow-Headers',
        'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version',
        'Content-Type',
        'Etag',
        'W/"1d-Q2OTxwbzgxeJZgOuAJDviA"',
        'Set-Cookie',
        'connect.sid=s%3A2s-m3TGxzvXDcf8dwC7DMramQPMiC8Ek.1xFaUZVaidrIrnXGBMAefTtFatR%2BOfWmQ7kaLQ1IPN8; Path=/; HttpOnly',
        'Vary',
        'Accept-Encoding',
        'Content-Encoding',
        'gzip',
        'Via',
        '1.1 vegur',
        'application/json; charset=utf-8',
        'Server',
        'cloudflare-nginx',
        'CF-RAY',
        '2468157fee7a3289-HKG',
        'Transfer-Encoding',
        'chunked',
        'Connection',
        'close',
        'Set-Cookie',
        '__cfduid=db2eca130adc6745d8018e11482ad57211447728163; expires=Wed, 16-Nov-16 02:42:43 GMT; path=/; domain=.jsonresume.org; HttpOnly'
      ],
      rawTrailers: Array [],
      read: Function { name: '' },
      readable: false,
      req: ClientRequest {
        _events: Object {
          drain: Function { name: '' },
          error: Function { name: '' },
          response: Function { name: '' }
        },
        _hangupClose: false,
        _hasBody: true,
        _header: 'PUT /account HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 121\r\nConnection: close\r\n\r\n',
        _headerNames: Object {
          accept: 'Accept',
          'accept-encoding': 'Accept-Encoding',
          'content-length': 'Content-Length',
          'content-type': 'Content-Type',
          host: 'Host',
          'user-agent': 'User-Agent'
        },
        _headerSent: true,
        _headers: Object {
          accept: 'application/json',
          'accept-encoding': 'gzip, deflate',
          'content-length': 121,
          'content-type': 'application/json',
          host: 'registry.jsonresume.org',
          'user-agent': 'node-superagent/1.4.0'
        },
        _last: true,
        _maxListeners: undefined,
        _removedHeader: Object { 'content-length': false },
        _trailer: '',
        agent: Agent {
          _events: Object { free: Function { name: '' } },
          _maxListeners: undefined,
          defaultPort: 80,
          domain: null,
          freeSockets: Object {},
          keepAlive: false,
          keepAliveMsecs: 1000,
          maxFreeSockets: 256,
          maxSockets: Infinity,
          options: Object { path: null },
          protocol: 'http:',
          requests: Object {},
          sockets: Object {}
        },
        chunkedEncoding: false,
        connection: Socket {
          _bytesDispatched: 342,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 959,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        domain: null,
        finished: true,
        method: 'PUT',
        output: Array [],
        outputCallbacks: Array [],
        outputEncodings: Array [],
        parser: null,
        path: '/account',
        res: [Circular],
        sendDate: false,
        shouldKeepAlive: false,
        socket: Socket {
          _bytesDispatched: 342,
          _connecting: false,
          _consuming: true,
          _events: Object {
            _socketEnd: Function { name: 'onSocketEnd' },
            agentRemove: Function { name: 'onRemove' },
            close: Array [
              Function { name: 'onClose' },
              Function { name: 'socketCloseListener' }
            ],
            drain: Function { name: 'ondrain' },
            end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
            error: Function { name: 'socketErrorListener' },
            finish: Function { name: 'onSocketFinish' },
            free: Function { name: 'onFree' }
          },
          _hadError: false,
          _handle: null,
          _host: 'registry.jsonresume.org',
          _httpMessage: [Circular],
          _idleNext: null,
          _idlePrev: null,
          _idleTimeout: -1,
          _maxListeners: undefined,
          _parent: null,
          _pendingData: null,
          _pendingEncoding: '',
          _readableState: ReadableState {
            awaitDrain: 0,
            buffer: Array [],
            decoder: null,
            defaultEncoding: 'utf8',
            emittedReadable: false,
            encoding: null,
            endEmitted: false,
            ended: false,
            flowing: true,
            highWaterMark: 16384,
            length: 0,
            needReadable: true,
            objectMode: false,
            pipes: null,
            pipesCount: 0,
            ranOut: false,
            readableListening: false,
            reading: true,
            readingMore: false,
            resumeScheduled: false,
            sync: false
          },
          _writableState: WritableState {
            bufferProcessing: false,
            bufferedRequest: null,
            corked: 0,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            ended: true,
            ending: true,
            errorEmitted: false,
            finished: true,
            highWaterMark: 16384,
            lastBufferedRequest: null,
            length: 0,
            needDrain: false,
            objectMode: false,
            onwrite: Function { name: '' },
            pendingcb: 0,
            prefinished: true,
            sync: false,
            writecb: null,
            writelen: 0,
            writing: false
          },
          allowHalfOpen: false,
          bytesRead: 959,
          destroyed: true,
          domain: null,
          parser: null,
          read: Function { name: '' },
          readable: false,
          writable: false
        },
        socketPath: undefined,
        useChunkedEncodingByDefault: true,
        writable: true
      },
      setEncoding: Function { name: '' },
      socket: Socket {
        _bytesDispatched: 342,
        _connecting: false,
        _consuming: true,
        _events: Object {
          _socketEnd: Function { name: 'onSocketEnd' },
          agentRemove: Function { name: 'onRemove' },
          close: Array [
            Function { name: 'onClose' },
            Function { name: 'socketCloseListener' }
          ],
          drain: Function { name: 'ondrain' },
          end: Array [ Function { listener: Function { name: 'onend' }, name: 'g' } ],
          error: Function { name: 'socketErrorListener' },
          finish: Function { name: 'onSocketFinish' },
          free: Function { name: 'onFree' }
        },
        _hadError: false,
        _handle: null,
        _host: 'registry.jsonresume.org',
        _httpMessage: ClientRequest {
          _events: Object {
            drain: Function { name: '' },
            error: Function { name: '' },
            response: Function { name: '' }
          },
          _hangupClose: false,
          _hasBody: true,
          _header: 'PUT /account HTTP/1.1\r\nHost: registry.jsonresume.org\r\nAccept-Encoding: gzip, deflate\r\nUser-Agent: node-superagent/1.4.0\r\nContent-Type: application/json\r\nAccept: application/json\r\nContent-Length: 121\r\nConnection: close\r\n\r\n',
          _headerNames: Object {
            accept: 'Accept',
            'accept-encoding': 'Accept-Encoding',
            'content-length': 'Content-Length',
            'content-type': 'Content-Type',
            host: 'Host',
            'user-agent': 'User-Agent'
          },
          _headerSent: true,
          _headers: Object {
            accept: 'application/json',
            'accept-encoding': 'gzip, deflate',
            'content-length': 121,
            'content-type': 'application/json',
            host: 'registry.jsonresume.org',
            'user-agent': 'node-superagent/1.4.0'
          },
          _last: true,
          _maxListeners: undefined,
          _removedHeader: Object { 'content-length': false },
          _trailer: '',
          agent: Agent {
            _events: Object { free: Function { name: '' } },
            _maxListeners: undefined,
            defaultPort: 80,
            domain: null,
            freeSockets: Object {},
            keepAlive: false,
            keepAliveMsecs: 1000,
            maxFreeSockets: 256,
            maxSockets: Infinity,
            options: Object { path: null },
            protocol: 'http:',
            requests: Object {},
            sockets: Object {}
          },
          chunkedEncoding: false,
          connection: [Circular],
          domain: null,
          finished: true,
          method: 'PUT',
          output: Array [],
          outputCallbacks: Array [],
          outputEncodings: Array [],
          parser: null,
          path: '/account',
          res: [Circular],
          sendDate: false,
          shouldKeepAlive: false,
          socket: [Circular],
          socketPath: undefined,
          useChunkedEncodingByDefault: true,
          writable: true
        },
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1,
        _maxListeners: undefined,
        _parent: null,
        _pendingData: null,
        _pendingEncoding: '',
        _readableState: ReadableState {
          awaitDrain: 0,
          buffer: Array [],
          decoder: null,
          defaultEncoding: 'utf8',
          emittedReadable: false,
          encoding: null,
          endEmitted: false,
          ended: false,
          flowing: true,
          highWaterMark: 16384,
          length: 0,
          needReadable: true,
          objectMode: false,
          pipes: null,
          pipesCount: 0,
          ranOut: false,
          readableListening: false,
          reading: true,
          readingMore: false,
          resumeScheduled: false,
          sync: false
        },
        _writableState: WritableState {
          bufferProcessing: false,
          bufferedRequest: null,
          corked: 0,
          decodeStrings: false,
          defaultEncoding: 'utf8',
          ended: true,
          ending: true,
          errorEmitted: false,
          finished: true,
          highWaterMark: 16384,
          lastBufferedRequest: null,
          length: 0,
          needDrain: false,
          objectMode: false,
          onwrite: Function { name: '' },
          pendingcb: 0,
          prefinished: true,
          sync: false,
          writecb: null,
          writelen: 0,
          writing: false
        },
        allowHalfOpen: false,
        bytesRead: 959,
        destroyed: true,
        domain: null,
        parser: null,
        read: Function { name: '' },
        readable: false,
        writable: false
      },
      statusCode: 401,
      statusMessage: 'Unauthorized',
      text: '{"message":"email not found"}',
      trailers: Object {},
      upgrade: false,
      url: ''
    },
    serverError: false,
    setEncoding: Function { name: '' },
    status: 401,
    statusCode: 401,
    statusType: 4,
    text: '{"message":"email not found"}',
    type: 'application/json',
    unauthorized: true
  },
  status: 401,
  message: 'Unauthorized'
} to not exist
      at test/index.js:100:18
      at lib/settings/change-password.js:18:7
      at Request.callback (node_modules/superagent/lib/node/index.js:797:3)
      at Stream.<anonymous> (node_modules/superagent/lib/node/index.js:990:12)
      at Unzip.<anonymous> (node_modules/superagent/lib/node/utils.js:108:12)
      at _stream_readable.js:908:16



npm ERR! Test failed.  See above for more details.
